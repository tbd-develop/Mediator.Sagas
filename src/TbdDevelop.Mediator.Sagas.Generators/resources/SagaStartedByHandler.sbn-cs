/// <auto-generated>
/// Generated by Mediator.Sagas source generators
/// </auto-generated>

using System;
using System.Threading.Tasks;
using Mediator;
using TbdDevelop.Mediator.Sagas.Contracts;
using TbdDevelop.Mediator.Sagas.Infrastructure;
{{ for using in usings }}
using {{using}};
{{ end }} 

namespace {{namespace}};

/// <summary>
/// Handler for {{notification}} to {{saga}}, will create a Saga if it does not exist
/// </summary>

public partial class {{classname}}(
    IMediator mediator, 
    ISagaFactory factory,
    ISagaPersistence persistence) : SagaNotificationHandlerBase<{{saga}}, {{notification}}>(mediator, persistence)
{
    protected override async ValueTask<{{saga}}> HandleNotification({{notification}} notification, CancellationToken cancellationToken)
    {
        if (notification is IOrchestratedNotification orchestrated)
        {
            var saga = await persistence.FetchSagaByOrchestrationIdentifier<{{saga}}>(
                orchestrated.OrchestrationIdentifier, cancellationToken);

            if (saga is null)
            {
                saga = factory.CreateSaga<{{saga}}>(orchestrated.OrchestrationIdentifier);
            }

            await saga.Handle(notification);

            return saga;
        }

        return null;   
    }
}