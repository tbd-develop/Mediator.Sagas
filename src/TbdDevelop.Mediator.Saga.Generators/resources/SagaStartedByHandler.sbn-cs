/// <auto-generated>
/// Generated by Mediator.Sagas source generators
/// </auto-generated>

using System;
using System.Threading.Tasks;
using Mediator;
using TbdDevelop.Mediator.Sagas.Contracts;
{{ for using in usings }}
using {{using}};
{{ end }} 

namespace {{namespace}};

/// <summary>
/// Handler for {{notification}} to {{saga}}
/// </summary>

public class {{classname}}(ISagaPersistence _persistence) : INotificationHandler<{{notification}}>
{
    public async ValueTask Handle({{notification}} notification, CancellationToken cancellationToken)
    {
        if( notification is not IOrchestratedNotification orchestrated) {
            return;
        }

        var saga = await _persistence.FetchSagaIfExistsByOrchestrationId<{{saga}}>(orchestrated.OrchestrationIdentifier, cancellationToken);

        if( saga is null) {
            saga = new {{saga}}(orchestrated.OrchestrationIdentifier);
        }

        saga.Handle(notification);

        await _persistence.Save(saga, cancellationToken);
    }
}